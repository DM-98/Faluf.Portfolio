@page "/fetchdata"
@using Faluf.Portfolio.Core.DTOs.Request
@using Faluf.Portfolio.Core.DTOs.Response
@using Faluf.Portfolio.Core.Domain
@using Faluf.Portfolio.Core.Interfaces
@using IdentityModel.Client
@inject HttpClient httpClient
@inject IRepository<Subject, SubjectModel, SubjectDTO> subjectService
@inject IAuthenticationService<TokenResponse> authenticationService

<PageTitle>Fetch a Subject</PageTitle>

<h1>Fetch a subject from database</h1>

<h4>This component demonstrates fetching data from the server.</h4>

@if (subject is null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (subject.Success)
    {
        <p><b>ID:</b> @subject.Content?.Id</p>
        <p><b>Name:</b> @subject.Content?.Name</p>
        <p><b>Description:</b> @subject.Content?.Description</p>
        <p><b>Created date:</b> @subject.Content?.CreatedDate</p>
        <p><b>Is inactive:</b> @subject.Content?.IsInactive</p>
    }
    else
    {
        <p>Error Message: @subject.ErrorMessage</p>
        <p>Error Type: @subject.ErrorType</p>
        <p>Exception Message: @subject.ExceptionMessage</p>
        <p>Inner Exception Message: @subject.InnerExceptionMessage</p>
    }
}

@code {
    private ResponseDTO<SubjectDTO>? subject;

    protected override async Task OnInitializedAsync()
    {
        TokenResponse tokenResponse = await authenticationService.GetTokenAsync("weatherapi.read");
        httpClient.SetBearerToken(tokenResponse.AccessToken);

        subject = await subjectService.GetByIdAsync(4);
    }
}